services:
  # n8n main application service
  - type: web
    name: n8n-app
    env: docker
    plan: starter
    envVars:
      - key: WEBHOOK_URL
        value: "${N8N_WEBHOOK_URL}"
      - key: GENERIC_TIMEZONE
        value: "Europe/Bucharest"
      - key: NODE_ENV
        value: "production"
      - key: N8N_ENCRYPTION_KEY
        value: "LnGMcaSProKXSD443aI5PzXA0N8sLxJ3P2X17"
      - key: NODE_OPTIONS
        value: "--max-old-space-size=2048"
      - key: EXECUTIONS_MODE
        value: "queue"
      - key: NODE_FUNCTION_ALLOW_EXTERNAL
        value: "*"
      - key: EXECUTIONS_QUEUE
        value: "redis"
      - key: QUEUE_HEALTH_CHECK_ACTIVE
        value: "true"
      - key: QUEUE_BULL_REDIS_HOST
        value: "n8n-redis"
      - key: QUEUE_BULL_REDIS_PORT
        value: "6379"
      - key: DB_TYPE
        value: "postgresdb"
      - key: DB_POSTGRESDB_HOST
        value: "${{ secrets.DB_POSTGRESDB_HOST }}"
      - key: DB_POSTGRESDB_DATABASE
        value: "n8n_db"
      - key: DB_POSTGRESDB_USER
        value: "n8n_db"
      - key: DB_POSTGRESDB_PASSWORD
        value: "n8n_pwd"
    # Specify healthCheckPath if your service exposes a health check endpoint.
    # disk: optional persistent storage configuration.
    
  # Background worker service configuration
  # Replicate the main n8n-app service configuration and adjust the command and other specifics as necessary.

# Redis configuration
- type: web # Use 'web' for Redis since Render does not differentiate Redis as a separate service type.
  name: n8n-redis
  env: docker
  plan: starter
  # Assuming you have a Dockerfile for Redis customization in your repository; otherwise, you might set up Redis manually on Render.
  # envVars: Redis specific environment variables can be added here.

# PostgreSQL database service
databases:
  - name: n8n-pgdb
    plan: starter
    # Environment variables are set automatically for databases in Render
